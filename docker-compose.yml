services:
  db:
    image: postgres:16-alpine
    container_name: lp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 12
      start_period: 10s

  proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    image: lp-proxy:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      ACCESS_TOKEN_KEY: ${ACCESS_TOKEN_KEY}
    ports:
      - "${PROXY_PORT:-8086}:8000"

  app:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    image: lp-app:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      ACCESS_TOKEN_KEY: ${ACCESS_TOKEN_KEY}
    ports:
      - "${APP_PORT:-8085}:8085"

  kyc:
    build:
      context: ./kyc
      dockerfile: Dockerfile
    image: lp-kyc:latest
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      SERVER_PORT: ${KYC_PORT:-8084}
      ACCESS_TOKEN_KEY: ${ACCESS_TOKEN_KEY}
    ports:
      - "${KYC_PORT:-8084}:8084"

  ui:
    build:
      context: ./app/ui
      dockerfile: Dockerfile
    image: lp-ui:latest
    depends_on:
      - app
    environment:
      NODE_ENV: production
    ports:
      - "${UI_PORT:-3000}:80"

volumes:
  db-data:

networks:
  default:
    name: lp-network
